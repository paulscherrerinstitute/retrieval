plugins {
    id 'application'
    id 'org.springframework.boot' version '2.4.1'
}

java {
    sourceCompatibility = JavaVersion.VERSION_12
    targetCompatibility = JavaVersion.VERSION_12
}

group 'ch.psi.daq'
version '2.1.0'

repositories {
    mavenCentral()
    maven { url "https://dl.bintray.com/paulscherrerinstitute/hltools" }
}

dependencies {
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    implementation platform(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-webflux'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-reactor-netty'
    //implementation group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'
    implementation group: 'io.projectreactor', name: 'reactor-tools', version: '3.4.1'
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter'
    implementation group: 'com.google.guava', name: 'guava', version: '30.1-jre'
    implementation group: 'ch.psi', name: 'bsread', version: '3.5.14'
    implementation group: 'ch.psi', name: 'bitshuffle-lz4', version: '1.1.2'
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.18.jre7'
    implementation(files('../ch.psi.daq.retrievalutils/build/libs/ch.psi.daq.retrievalutils-0.0.1.jar'))
}

test {
    useJUnitPlatform()
}

processResources {
    outputs.upToDateWhen { false }
    List<String> cmd1 = ArrayList.of("git", "describe", "--dirty", "--always", "--abbrev=9")
    String[] cmd2 = (String[])cmd1.toArray()
    Process p = Runtime.getRuntime().exec((String[])cmd1.toArray())
    byte[] buf = Runtime.getRuntime().exec(cmd2).inputStream.readAllBytes()
    String commitDescribe = StandardCharsets.UTF_8.decode(ByteBuffer.wrap(buf))
    expand(appVersion: project.version, buildDateTime: ZonedDateTime.now(ZoneOffset.UTC).format(DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ssz")), commitDescribe: commitDescribe)
}

//jar { enabled = true }
bootJar {
    archiveClassifier.set('all')
}

import java.nio.ByteBuffer
import java.nio.charset.StandardCharsets
import java.nio.file.Files
import java.time.ZoneOffset
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

task bootJarVer {
    doLast {
        String ver = project.version.toString()
        System.out.format("Built version %s\n", ver)
        ByteBuffer buf = StandardCharsets.UTF_8.encode(ver)
        Files.createDirectories(java.nio.file.Path.of("build/libs"))
        OutputStream f1 = Files.newOutputStream(java.nio.file.Path.of("build/libs/thisver.txt"))
        f1.write(buf.array(), buf.position(), buf.remaining())
        f1.close()
    }
}

bootJar {
    dependsOn bootJarVer
}
